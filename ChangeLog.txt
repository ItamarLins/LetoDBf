/* Encoding: UTF-8 (No BOM)  Notation (in 5th position):
     * Change, ! Fix, % Optimization, + Addition, - Removal, ; Comment
*/

2016-12-08 18:35 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/letoudf.prg
  * source/server/letofunc.c
    ! LETO_RECLOCK() params were screwed after recently add of bAppend param

  * tests/test_var.prg
    * formatting
  * source/server/letovars.c
    * add limitation for arrays to be in sum with all strings default maximum
      64 MB in size, and a quarter of total max ( 16 MB ) for a single item;
      out-of-limits will lead to discard, perhaps leaving empty string/ array;
      config option in letodb.ini is now size-limit of all strings + arrays.
    ; as arrays are stored internally as binary string, a single 16 MB
      PHB_ITEM array means also a xx MB binary sized storing string;
      plus each connection/ thread using such variable will have its own
      TLS PHB_ITEM, so huge values shell be carefully choosen.

  * Readme.txt
    * some corrections, additions, typos, bad english ...
    * additions about use of the new remote console, and Uhura :-)
    ; still remaining nonsense, missing explanations, formatting !, ...

2016-12-08 08:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/leto_lnx.c
    * limit last warn disable for gcc >= 4.06

  * source/client/letocl.c
  * source/client/letomgmn.c
    * pacify two warnings for clang 3.8

2016-12-08 07:59 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/leto_lnx.c
    * try to disable 2 warning for gcc about unused results, what they are ;-)

2016-12-07 22:20 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! if a DbSkip( 0 ) results in a changed record ( because filter active ),
      discard the skip buffer

2016-12-07 21:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    % two more inlining
    - cleanup of '#if 0'

  * include/funcleto.h
    ! LETO_IDXINFOBLOCK macro is expanded, then only last value multiplied;
      missing brackets around that #define of aggregated constants
    ; arghh

2016-12-07 17:32 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/common/common_c.c
    * instead of inlining use a copy of ultostr() in eprintf()

2016-12-07 16:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/common/common_c.c
  * source/common/lz4netc.c
    - not inlining of non static functions

2016-12-07 16:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  - source/common/letoserv.prg

  * source/server/letobm.prg
  * source/client/letobmcl.c
  * source/server/server.prg
    - removal of LETO_ATOC() LETO_CTOA() array conversion,
      transmit arrays directly

  * letodb.hbp
  * letoaddon.hbp
  * letodbsvc.hbp
  * letodebug.hbp
  * rddleto.hbp
  * rddletoaddon.hbp
  * rddletodebug.hbp
    - removal of common/letoserv.prg
    ! fix that lz4 is bound in letodbsvc.hbp

2016-12-07 15:05 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/test_var.prg
    + added showcase of variable type: array
    ; a tiny, but very powerful addition to the leto_Var*() system
    * formatting

  * source/server/leto_2.c
    * not inlining leto_ExitGlobal() cause of static variable therein

  * tests/letoudf.prg
    * cleanup

2016-12-07 12:45 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/buildall.bat
  * tests/buildall.sh
  * tests/runall.bat
  * tests/runall.sh
    + added test_file

  * source/server/letovars.c
  * source/client/letocl.c
  * source/client/letomgmn.c
    + intoducing variable type ARRAY for the leto_Var*() system
    * add one casting ulong->ushort, it's verified to do so.

  * source/server/leto_win.c
    ! add a probably missing timeout value to about still nearly original piece
      of LetoDB code.

  * include/funcleto.h
    ! increasing LETO_IDXINFOBLOCK -- ToDo: have to do more specific high ;-)
      mathematics why this was too small

  * source/server/letofunc.c
    * tiny more secure about failure to create an index
    * add fAppend param to LETO_RECLOCK

  * Readme.txt
    * updated for array param in leto_Var*()

2016-12-06 09:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letobm.prg
  * source/client/letobmcl.c
  * source/client/leto1.c
  * tests/letoudf.prg
  * Readme.txt
    * cleanups

  * Changelog.txt
    * typo

2016-12-06 06:52 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
    ; some comments
    % one new item

  * source/client/letocl.c
    * ToDo left from 2016-12-01, fetch memofield out of transaction buffer,
      instead of unmodified server data.
    ; For any data-update during transaction shell be avoided to modify same
      record AND same field multiple times, with in between jumping to another
      record of WA. This case always first modification will be fetched as
      base value for next change.
    % spare a local variable
    % opt out a commonly appearing double call of leto_SearchTransList(),
      one time for read, one time for (buffered) write after changes

2016-12-05 13:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/errint.c
    - removed the willful intentional crash test, so MinGW GNU C 6.2 have
      none! single warning left

2016-12-05 05:50 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letomgmn.c
    ! remove last empty array item after deleting the first in leto_udf()

  * source/server/letobm.prg
  * source/client/letobmcl.c
    * added boolean return value for rushmore leto_udf calls

  * source/server/server.prg
    * added requests for __BM functions

  * source/server/letofunc.c
    * changes to accept rushmore filter
    * skip to valid record in leto_Skip() if filter is active

  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    * let use rushmore also fOptimized flag like normal
    * throwed LETO_PARSEREC() !PRG! level into the basket bin !
    ; use instead a silly simple DbGoto() or DbGoTop() at PRG level
    * in case of wrong keytype to search for LetoDbSeek() throw a RTE,
      not silently jump to EOF + 1
    - removal of leto_ClearBuffers(), change calls to pTable->ptrBuf = NULL
    ! two more places in [set|clear]filter without skip buffer clearance

2016-12-04 14:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! and another fix for LetoDbGoTo() :-(

2016-12-04 14:09 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/leto1.c
    * added missing HB_TRACE() for RDDFUNCS, shell be now complete

  * source/client/letocl.c
    ! make the found record in buffer the first in buffer
    - removed the only HB_TRACE

  * source/client/letomgmn.c
    * corrected HB_TRACE

2016-12-04 11:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! not the first record, but the active record not to re-read

2016-12-03 15:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/buildall.bat
  * tests/runall.bat
    * file attributes
    ; to run all tests, use: runall[.sh] x.x.x.x
      where this x.x.. is the IP address of server, optional with ':port'

  * source/client/leto1.c
    * do not mark in letoPutRec() autoinc fields for update at server,
      server shell be the only instance who changes these values.

  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    ! inherited from LetoDB: in LetoDbGoTo() ulRecno was parsed 1 byte too
      early; there is a pre-leading flag byte before the RecNo,
    * not invalidate skip buffer after [un]locking, so now it's possibe to
      lock and unlock without loosing skip buffer;
    * ensured that first record in buffer is not re-read in LetoDbSkip(),
      as it possible is meanwhile updated
    * do not set uiRecInBuf and do not re-read first record in buffer in
      LetoDbGoTo()
    * adjust buffer origin in LetoDbPutRecord() and LetoDbPutMemo(), so active
      record is the first in buffer after data updates during no transaction
    * add at few places a missing clearance of skip buffer
    % buffer hit counter: uiShoots -> ulShoots
    - no need to fill buffer with a single record, removed leto_setSkipBuf()
      calls - filling buffer will actually happen only in LetoDbSkip()
    ; above will give significant performance increase with repeated calls:
      [F|R]Lock(); REPL ... with ...; DbUnlock(); DbSkip();

  * source/server/letofunc.c
    ! fix wrong calculation for szReply buffer/ fieldinfo in leto_OpenTable()
    * added info in leto_CreateTable() when max record size: 65534 or
      field count: 2047 is oversized

  * source/server/leto_2.c
    % send/ recv buffer size to 64KB

2016-12-03 05:47 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    * revert this change about a compiler warning

2016-12-02 18:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
  * source/client/letomgmn.c
  * source/server/errint.c
  * source/server/letofunc.c
    * try to pacify some MinGW GNU C 6.2 warnings, it found one real bug

2016-12-02 16:20 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ; correcting old comment, description was wrong
    ! fix!, that a record length of 43 is treated as no new record data,
      >= 0x2B0000 is secure never to happen

  * source/server/letofunc.c
    ! fix a crash during try to close not found WA ( empty pAStru )
    * typo

2016-12-01 20:12 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  ; README.md
    ; typo - file missing in last commit

  * include/letocl.h
  * source/client/leto1.c
    - removal of older xHarbour RDDFUNCS table version ( __OLDRDD__ )

2016-12-01 19:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * README.md
    * typo

  * Readme.txt
    - mark LETO_SETSEEKBUFFER as deprecated

  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    % minor performance arrangement for transactions
    - remove of seek buffers aka LETO_SETSEEKBUFFER,
      was off by default and the logig behind meanwhile got invalid,
      leading to a nice clean LetoDbSeek()

2016-12-01 11:45 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    * move changed-record update call [ --> leto_PutRec() ] into letoSkipRaw(),
      so all these calls are in client1.c, only except for record appending;
      added reset of pending relations
    - remove relicts of ugly FastAppend hack, it led to serious problems in
      multiple areas ( memo update, locks tracking, autoincrement fields, .. );
      a transaction can be used instead for a similar effect
    + added field type HB_FT_ANY for transactions ( untested );
    ; ToDo ?: updated memo fields in transaction buffer, difficult :-(

2016-11-30
  * .
    initial upload after huge changes in all areas