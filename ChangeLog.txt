/* Encoding: UTF-8 (No BOM)  Notation (in 5th position):
     * Change, ! Fix, % Optimization, + Addition, - Removal, ; Comment
*/

2016-12-03 15:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/buildall.bat
  * tests/runall.bat
    * file attributes
    ; to run all tests, use: runall[.sh] x.x.x.x
      where this x.x.. is the IP address of server, optional with ':port'

  * source/client/leto1.c
    * do not mark in letoPutRec() autoinc fields for update at server,
      server shell be the only instance who changes these values.

  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    ! inherited from LetoDB: in LetoDbGoTo() ulRecno was parsed 1 byte too
      early; there is a pre-leading flag byte before the RecNo,
    * not invalidate skip buffer after [un]locking, so now it's possibe to
      lock and unlock without loosing skip buffer;
    * ensured that first record in buffer is not re-read in LetoDbSkip(),
      as it possible is meanwhile updated 
    * do not set uiRecInBuf and do not re-read first record in buffer in
      LetoDbGoTo()
    * adjust buffer origin in LetoDbPutRecord() and LetoDbPutMemo(), so active
      record is the first in buffer after data updates during no transaction
    * add at few places a missing clearance of skip buffer
    % buffer hit counter: uiShoots -> ulShoots 
    - no need to fill buffer with a single record, removed leto_setSkipBuf()
      calls - filling buffer will actually happen only in LetoDbSkip()
    ; above will give significant performance increase with repeated calls:
      [F|R]Lock(); REPL ... with ...; DbUnlock(); DbSkip();

  * source/server/letofunc.c
    ! fix wrong calculation for szReply buffer/ fieldinfo in leto_OpenTable()
    * added info in leto_CreateTable() when max record size: 65534 or
      field count: 2047 is oversized

  * source/server/leto_2.c
    % send/ recv buffer size to 64KB

2016-12-03 05:47 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    * revert this change about a compiler warning

2016-12-02 18:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
  * source/client/letomgmn.c
  * source/server/errint.c
  * source/server/letofunc.c
    * try to pacify some MinGW GNU C 6.2 warnings, it found one real bug

2016-12-02 16:20 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ; correcting old comment, description was wrong
    ! fix!, that a record length of 43 is treated as no new record data,
      >= 0x2B0000 is secure never to happen

  * source/server/letofunc.c
    ! fix a crash during try to close not found WA ( empty pAStru )
    * typo

2016-12-01 20:12 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  ; README.md
    ; typo - file missing in last commit

  * include/letocl.h
  * source/client/leto1.c
    - removal of older xHarbour RDDFUNCS table version ( __OLDRDD__ )

2016-12-01 19:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * README.md
    * typo

  * Readme.txt
    - mark LETO_SETSEEKBUFFER as deprecated

  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    % minor performance arrangement for transactions
    - remove of seek buffers aka LETO_SETSEEKBUFFER,
      was off by default and the logig behind meanwhile got invalid,
      leading to a nice clean LetoDbSeek()

2016-12-01 11:45 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    * move changed-record update call [ --> leto_PutRec() ] into letoSkipRaw(),
      so all these calls are in client1.c, only except for record appending;
      added reset of pending relations
    - remove relicts of ugly FastAppend hack, it led to serious problems in
      multiple areas ( memo update, locks tracking, autoincrement fields, .. );
      a transaction can be used instead for a similar effect
    + added field type HB_FT_ANY for transactions ( untested );
    ; ToDo ?: updated memo fields in transaction buffer, difficult :-(

2016-11-30
  * .
    initial upload after huge changes in all areas