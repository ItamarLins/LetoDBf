/* Encoding: UTF-8 (No BOM)  Notation (in 5th position):
     * Change, ! Fix, % Optimization, + Addition, - Removal, ; Comment
*/

2017-12-31 14:30 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * letodb.hbp
  * letodbaddon.hbp
  * letodebug.hbp
  * rddleto.hbp
  * rddletodebug.hbp
  * source/server/server.prg
    * removing __LINUX__ define, hbp cleanups
    * change comment to stop server in Linux console mode

  * source/client/leto1.c
    * remove homebrew, back for all to use hb_strnToNum()

  * source/server/letofunc.c
    % spare 2 variables, formatting
    * compiler warnings

  * bin/letodb.ini
    * better default setup for newbies

  * Readme.txt

2016-12-31 15:55 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * include/rddleto.ch
  * include/funcleto.
    * move 4 DBI_* constants into user space

  * include/srvleto.h
  * source/client/leto1.c
  * source/client/letocl.c
  * source/server/leto_2.c
  * source/common/lz4net.c
    + possible disabling skipbuffer per table, new default '-2' == no specific
      timeout per table; transfer disabled skipbuffer setting to server
    * increase min size to compress
    % reactivate the use of MSG_MORE flag for Linux! machines
    ; this maybe don't increase network performance, but will significant
      lower CPU load as no extra buffer/ memcpy() is needed to compose message

  * source/server/letofunc.c
    * transfer only one record in case of disabled skipbuffer
    % minors

  * Readme.txt
    + adding commands to manually start/ stop LetoDBf as service, thanks Leon
    + comments on BCC, Variables, use of table specific skipbuffer timeout

  ; had found the correct place of earlier problems with BCC and MsVc,
    but analyse result was wrong: it was a stack variable buffer overflow :-(

2016-12-30 10:11 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/leto1.c
  * source/server/letovars.c
    * some BCC warnings
    ! too long ? value for hb_snprintf

  * source/client/letomgmn.c
    * return in any case of error an [empty] array for LETO_DIRECTORY()

  * source/server/letofunc.c
    ! FIX for older compiler, too much alloc at stack, put at heap
    * cleaning homebrew conversions for FT_FLOAT and FT_LONG
    + add fExlusive in LETO_ORDCREATE()
    ; ToDo same param order as in Harbour

  * utils/backup/letobackup.prg
  * utils/manager/console.prg
    ! == comparison
    * refresh in case of no input

2016-12-28 11:11 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    + fExlusive flag for creating index
    ! fix LetoDbSkip() skipbuffer use
    ; Thanks! to Itamar for pointig to it

  * source/server/letofunc.c
    + fExlusive flag for creating index
    ! fix filename verification for fTemporary index

  * Readme.txt
  * source/server/leto_lnx.c
  * source/server/server.prg
    + adding UID and GID for Linux server to run as daemon

2016-12-23 21:21 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/letomgmn.c
    ! the missing setting to hb_rddDefaultDrv( "LETO" ) in Leto_Connect()
    ; add this for now only here, not in LetoConnectionNew() to not disturb
      intentional used different setup

2016-12-23 21:21 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/letomgmn.c
    * snprintf() --> sprintf(), buffer enlarged

2016-12-23 19:09 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * README.md
    ! typo

  - test/test_max.prg
    ; that was just elch game play

  * tests/test_dbfe.prg
    + add test for dbcreate leaving created WA opened

  * tests/ron.prg
    * use DbAppend() for shared opened tables
    ! let min two threads run for single core

  * test/runall.bat
  * test/runall.sh
    + if no IP is given, take default "127.0.0.1:2812"

  * source/client/letomgmn.c
    ! fix a hb_snprintf( "%f") crash! in XP64 64bit-Mingw 5.1 TDC
    ! general fix decimals for LetoVarSet() double values

  * source/server/leto_2.c
    % pSendBuffer freed/allocated with user [dis]connect, in between re-alloc;
      optimizing checks about
    ; size is 1 byte longer as ulSndBufLen for terminating
    * changing log messages

  * source/server/letofunc.c
    * remove netname log entry disconnect, add exename log entry conntect
    ! leto_Drop() use plain filename only with a PATH set
    % leto_StrTran() s_pDataPath when set with server start, determine length
    * changing log messages

2016-12-22 11:00 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * tests/ron.prg
    % faster run if no log file ( default )
    % as much threads as CPU cores
    ! open DBF with different ALIAS after index creation, else LetoDBf will
      refuse to modify at demo start existing auto-opened index, as then other
      users have then to reload it.
    * formatting

2016-12-21 01:35 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/server/letofunc.c
  * source/server/server.prg
    - clean-ups of remained nonsense, not more needed, #if 0 ...

2016-12-20 23:03 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * tests/ron.prg
    ! missing file in commit, sigh !

2016-12-20 22:57 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * tests/ron.prg
    ! changed Leto_GetCurrentConnection() return type: string!
    ; please verify that also in your sourcecode !

  * source/server/letofunc.c
    - senseless debug message
    ! add DataPath, not a possible DEFAULT to first search PATH list
    % harden-ing possible crash if older client lib did not transfer
      SET DEFAULT/ PATH; leave a note about in letodbf.log

2016-12-19 19:55 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/server/letofunc.c
    ! undeclared var, sigh!

2016-12-19 19:15 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/leto1.c
  * source/client/letocl.c
  * source/client/letomgmn.c
    + re-activated Leto_[Get|Set]CurrentConnection(); by using connection
      string "//IP:port//" what shell be safe; clear of pCurrentConn pointer
      ;THANKs to Itamar to let me think about.

  * Readme.txt
    + updated notes about above

  * source/server/letofunc.c
    * msvc 10 warnings

2016-12-19 15:55 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/leto1.c
    ! missing file in last commit ;-(
    * isolate unlocking records in a solely function
    % formatting

  ; typo in ChangeLog.txt

2016-12-19 11:55 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * source/client/letocl.c
  * source/server/letofunc.c
    ! fix the path beautyfier not wrongly to remove duplicate PS
    * LETO_MEMOISEMPTY() param order change
    * some comments, temporary '//' --> verified to remain '/* */'

  * Readme.txt
    * other fixes and adds

2016-12-19 02:55 UTC+0100 Rolf 'elch' Beckmann (elchs users.noreply.github.com)
  * ChangeLog.txt
    ! wrong date ;-)

  * include/letocl.h
  * include/srvleto.h
  * include/funcleto.h
  * source/client/leto1.c
  * source/client/letocl.c
  * source/client/letomgmn.c
    ! hb_vmCDP() theoretical can return NULL
    ! fix LETO_GETLOCALIP, return also optional server IP
    ! fix the quick fix in LetoMemoRead(), the ToDo remains
    + introducing SET DEFAULT/ SET PATH
    - non existent extern function in funcleto.h
    - removing the Leto_Path() concept, it disturbed a lot !

  * source/server/letofunc.c
    + added protection to not open *same* table with different CP, else it
      will lead to an RTE at client like not allowed shared access
    + introducing SET DEFAULT/ SET PATH
    % search for DBOI_POSITION only first time, then calculate up/ down
      without re-research
    ; used in conjunction with PRG level rddInfo( RDDI_BUFKEYNO, .T. ),
      have extreme negative performance effect if OrdKeyNo() is not very often
      needed, only this case it may improve to buffer value in the skip buffer

  * tests/basic.prg
  * tests/dbfe.prg
    ! fix for test run without new file create

  * Readme.txt
    - LETO_PATH
    * other fixes and adds

2016-12-15 12:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/cmdleto.h
  * include/funcleto.h
  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
  * source/server/leto_2.c
  * source/server/letofunc.c
    % last dust from early morning
    + flush() together with append/ update in a smooth kind

  * include/srvleto.h
  * source/server/letofunc.c
    ! dateformat ! wrong detected/ not set during first connect;
      THANKS! goes to Leon for report
    + add info about CP and DF into server connect log entry, moved that
    + check dateformat with each opentable/ createtable if its changed
    + add setting of epoch transmit with initial connect

  * Readme.txt
  * tests/basic.prg
    + add info that dateformat shell be set in application before connecting
      or opening tables

2016-12-13 08:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * letodb.hbp
  * letoaddon.hbp
  * letodbsvc.hbp
    ! disable warn=max; warns about cpp+11 style

2016-12-13 07:33 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
  * source/server/leto_2.c
  * source/server/letocl.c
  * source/server/leto_2.c
  * source/server/letofunc.c
  * test/test_dbfe.prg
  * test/test_filt.prg
    + RDDI_STRUCTORD
    ! default memotypes fix ( smt )
    - removing partial encrypting record data
    ; in LetoDBf Blowfish encrypt possible with network traffic compression;
      old param in server.prg stays at moment as unused placeholder
    - cleanup

  * source/client/letobmcl.c
  * source/server/letobm.prg
  * source/server/server.prg
    * more secure-ing bitmap filter
    ! missing xOrder for leto_ClearEnv()

  * Readme.txt
    ; as usual until better ;-)

2016-12-13 13:13 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * letodb.hbp
  * letoaddon.hbp
  * letodbsvc.hbp
  * Readme.txt
  * source/server/server.prg
    * added/ modified information about codepage extensions

2016-12-13 09:27 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * Readme.txt
  * source/client/letocl.c
  * source/client/letomgmn.c
    % minor mods

  * source/server/server.prg
    % not use heap
    - cleanups

2016-12-12 23:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/cmdleto.h
  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
  * source/server/leto_2.c
  * source/server/letofunc.c
    - removing the LETO_COMMIT() hack, LetoDBf does not benefit, maybe is
      even faster without: will send out data-update, unlock, flush and wait
      for none of these requests for the server ACK
    ; 'command' itself is still there!, can be even called during transactions
    ; removal cleans up functions which are very complex by its nature,
      and belong to the most called ones.

  * Readme.txt
    * tiny note about about, other mods

2016-12-12 17:08 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letol.c
    ! revert cleaning the buffers, as it is only searched in limit to formerly
      set item; fix of not everwhere available hb_xreallocz()

2016-12-12 14:11 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * Readme.txt
    * improves; a note about not given :port --> not send

  * test/test_file.prg
    * just a bit clean-up

2016-12-12 05:05 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * Readme.txt
    ! lock mixing only for same WA forbidden
    * move Leto_Ferror to top of list

  * source/client/letocl.c
    * leto_Ferror() also for Leto_File()
    ! quick dirty fix against client crash if filefunc disabled;
    ; ToFix change protocol!

2016-12-12 03:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    ! re-allow switching from Rlock() to Flock(), but then remove Rlocks
    * allocate clean buffers !for transactions
    * log all WA with records to append during transaction;
      when transaction is commited, it must for such shareable WA
      exist a [F|R]lock, else Flock() is automatic tried; if that Flock()
      fails, Transaction will throw a RTE.
    ; this resolves a possible race condition at server side:
      after successful check to start transaction sequence, another
      connection could jumped in with a Flock() for a WA with records to be
      appended in transaction; at least a Rlock will prevent that.

  * source/server/letofunc.c
    ! allow Flock() for empty table, aka validation for !RecNo was wrong

  * test/test_ta.prg
    - straying DbUnlock()
  * test/test_mem.prg
    + #define to switch for two performance tests as transaction

  * Readme.txt
    * notes about transactions
    + add leto_direxist, leto_dirremove
    ; not working leto_file() a myth ?

2016-12-11 11:21 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    % mutex lock the list one time before the loop, not for each item
    % redundant 'else' condition

  * Readme.txt
    * more corrections, improvements
    ; more may follow, ToDo: convert to a MD

2016-12-10 21:21 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    ! if not to be unlocked, registering append locks must happen even not
      physical lockable, e.g. for hbMemIO tables.

  * utils/manager/console.prg
    * cell for locks fill the whole browse area

  * Readme.txt
    * more corrections, improvements

2016-12-10 16:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letol.c
  * source/client/letocl.c
    * inform RDD by SELF_RAWLOCK(), take more care about readonly tables

  * include/srvleto.h
  * source/server/letofunc.c
    + add readonly flag

2016-12-10 15:25 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/srvleto.h
  * source/client/letol.c
  * source/server/letofunc.c
    ! during transaction append not to unlock other records, but then unlock
      all appended records after transaction completed or register them;
      do last step only if any record is possible locked by append
    ; this will significiant slow down transaction for shareable, not FLocked
      table, but it's a must to do so

2016-12-10 10:57 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    ! very serious ! silly bug fix about locking, Thanks! goes to Nenad
    ; can someone send him a medallion ?

  * tests/test_mem.prg
    + including test about above fix

2016-12-09 16:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * Readme.txt
    * try to more improve, to get important information to the begining

2016-12-09 15:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * Readme.txt
    * improving build instructions
    - remove redundant text found in README.md

2016-12-09 14:21 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letovars.c
  * source/client/letomgmn.c
    * dissolve inline function into solely target

  * utils/manager/console.prg
    + add change debuglevel into menu

2016-12-09 13:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * letodbaddon.hbp
    - remove splice test

  * source/server/letofunc.c
  * source/server/leto_2.c
  * source/client/letocl.c
  * source/client/letol.c
    * correct clang warnings

2016-12-09 12:42 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    * one more compiler warning

  * Readme.txt
    + adding note about installing LetoDBf into system paths

2016-12-09 11:42 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letovars.c
  * source/client/letomgmn.c
    * HB_IT_LONG has also no decimals
    * make LETO_VPREVIOUS flag invalid for string and array
    * more clean implementation of double values, fixing rounding problems
    * secure if string or array won't be created because set length limits,
      then not to leave an empty 'typeless' variable
    ! fix wrong boolean detection in LETO_VARGETLIST

  * tests/test_var.prg
    * adding test for LETO_VPREVIOUS

2016-12-09 06:05 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * letodbsvc.hbp
    - double call of lz4net.c

  * source/server/letofunc.c
    * compiler warning about unfinished, still unused funtion

2016-12-08 18:35 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/letoudf.prg
  * source/server/letofunc.c
    ! LETO_RECLOCK() params were screwed after recently add of bAppend param

  * tests/test_var.prg
    * formatting
  * source/server/letovars.c
    * add limitation for arrays to be in sum with all strings default maximum
      64 MB in size, and a quarter of total max ( 16 MB ) for a single item;
      out-of-limits will lead to discard, perhaps leaving empty string/ array;
      config option in letodb.ini is now size-limit of all strings + arrays.
    ; as arrays are stored internally as binary string, a single 16 MB
      PHB_ITEM array means also a xx MB binary sized storing string;
      plus each connection/ thread using such variable will have its own
      TLS PHB_ITEM, so huge values shell be carefully choosen.

  * Readme.txt
    * some corrections, additions, typos, bad english ...
    * additions about use of the new remote console, and Uhura :-)
    ; still remaining nonsense, missing explanations, formatting !, ...

2016-12-08 08:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/leto_lnx.c
    * limit last warn disable for gcc >= 4.06

  * source/client/letocl.c
  * source/client/letomgmn.c
    * pacify two warnings for clang 3.8

2016-12-08 07:59 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/leto_lnx.c
    * try to disable 2 warning for gcc about unused results, what they are ;-)

2016-12-07 22:20 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! if a DbSkip( 0 ) results in a changed record ( because filter active ),
      discard the skip buffer

2016-12-07 21:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    % two more inlining
    - cleanup of '#if 0'

  * include/funcleto.h
    ! LETO_IDXINFOBLOCK macro is expanded, then only last value multiplied;
      missing brackets around that #define of aggregated constants
    ; arghh

2016-12-07 17:32 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/common/common_c.c
    * instead of inlining use a copy of ultostr() in eprintf()

2016-12-07 16:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/common/common_c.c
  * source/common/lz4netc.c
    - not inlining of non static functions

2016-12-07 16:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  - source/common/letoserv.prg

  * source/server/letobm.prg
  * source/client/letobmcl.c
  * source/server/server.prg
    - removal of LETO_ATOC() LETO_CTOA() array conversion,
      transmit arrays directly

  * letodb.hbp
  * letoaddon.hbp
  * letodbsvc.hbp
  * letodebug.hbp
  * rddleto.hbp
  * rddletoaddon.hbp
  * rddletodebug.hbp
    - removal of common/letoserv.prg
    ! fix that lz4 is bound in letodbsvc.hbp

2016-12-07 15:05 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/test_var.prg
    + added showcase of variable type: array
    ; a tiny, but very powerful addition to the leto_Var*() system
    * formatting

  * source/server/leto_2.c
    * not inlining leto_ExitGlobal() cause of static variable therein

  * tests/letoudf.prg
    * cleanup

2016-12-07 12:45 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/buildall.bat
  * tests/buildall.sh
  * tests/runall.bat
  * tests/runall.sh
    + added test_file

  * source/server/letovars.c
  * source/client/letocl.c
  * source/client/letomgmn.c
    + intoducing variable type ARRAY for the leto_Var*() system
    * add one casting ulong->ushort, it's verified to do so.

  * source/server/leto_win.c
    ! add a probably missing timeout value to about still nearly original piece
      of LetoDB code.

  * include/funcleto.h
    ! increasing LETO_IDXINFOBLOCK -- ToDo: have to do more specific high ;-)
      mathematics why this was too small

  * source/server/letofunc.c
    * tiny more secure about failure to create an index
    * add fAppend param to LETO_RECLOCK

  * Readme.txt
    * updated for array param in leto_Var*()

2016-12-06 09:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letobm.prg
  * source/client/letobmcl.c
  * source/client/leto1.c
  * tests/letoudf.prg
  * Readme.txt
    * cleanups

  * Changelog.txt
    * typo

2016-12-06 06:52 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
    ; some comments
    % one new item

  * source/client/letocl.c
    * ToDo left from 2016-12-01, fetch memofield out of transaction buffer,
      instead of unmodified server data.
    ; For any data-update during transaction shell be avoided to modify same
      record AND same field multiple times, with in between jumping to another
      record of WA. This case always first modification will be fetched as
      base value for next change.
    % spare a local variable
    % opt out a commonly appearing double call of leto_SearchTransList(),
      one time for read, one time for (buffered) write after changes

2016-12-05 13:00 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/errint.c
    - removed the willful intentional crash test, so MinGW GNU C 6.2 have
      none! single warning left

2016-12-05 05:50 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letomgmn.c
    ! remove last empty array item after deleting the first in leto_udf()

  * source/server/letobm.prg
  * source/client/letobmcl.c
    * added boolean return value for rushmore leto_udf calls

  * source/server/server.prg
    * added requests for __BM functions

  * source/server/letofunc.c
    * changes to accept rushmore filter
    * skip to valid record in leto_Skip() if filter is active

  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    * let use rushmore also fOptimized flag like normal
    * throwed LETO_PARSEREC() !PRG! level into the basket bin !
    ; use instead a silly simple DbGoto() or DbGoTop() at PRG level
    * in case of wrong keytype to search for LetoDbSeek() throw a RTE,
      not silently jump to EOF + 1
    - removal of leto_ClearBuffers(), change calls to pTable->ptrBuf = NULL
    ! two more places in [set|clear]filter without skip buffer clearance

2016-12-04 14:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! and another fix for LetoDbGoTo() :-(

2016-12-04 14:09 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/leto1.c
    * added missing HB_TRACE() for RDDFUNCS, shell be now complete

  * source/client/letocl.c
    ! make the found record in buffer the first in buffer
    - removed the only HB_TRACE

  * source/client/letomgmn.c
    * corrected HB_TRACE

2016-12-04 11:55 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ! not the first record, but the active record not to re-read

2016-12-03 15:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * tests/buildall.bat
  * tests/runall.bat
    * file attributes
    ; to run all tests, use: runall[.sh] x.x.x.x
      where this x.x.. is the IP address of server, optional with ':port'

  * source/client/leto1.c
    * do not mark in letoPutRec() autoinc fields for update at server,
      server shell be the only instance who changes these values.

  * include/letocl.h
  * source/client/leto1.c
  * source/client/letocl.c
    ! inherited from LetoDB: in LetoDbGoTo() ulRecno was parsed 1 byte too
      early; there is a pre-leading flag byte before the RecNo,
    * not invalidate skip buffer after [un]locking, so now it's possibe to
      lock and unlock without loosing skip buffer;
    * ensured that first record in buffer is not re-read in LetoDbSkip(),
      as it possible is meanwhile updated
    * do not set uiRecInBuf and do not re-read first record in buffer in
      LetoDbGoTo()
    * adjust buffer origin in LetoDbPutRecord() and LetoDbPutMemo(), so active
      record is the first in buffer after data updates during no transaction
    * add at few places a missing clearance of skip buffer
    % buffer hit counter: uiShoots -> ulShoots
    - no need to fill buffer with a single record, removed leto_setSkipBuf()
      calls - filling buffer will actually happen only in LetoDbSkip()
    ; above will give significant performance increase with repeated calls:
      [F|R]Lock(); REPL ... with ...; DbUnlock(); DbSkip();

  * source/server/letofunc.c
    ! fix wrong calculation for szReply buffer/ fieldinfo in leto_OpenTable()
    * added info in leto_CreateTable() when max record size: 65534 or
      field count: 2047 is oversized

  * source/server/leto_2.c
    % send/ recv buffer size to 64KB

2016-12-03 05:47 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/server/letofunc.c
    * revert this change about a compiler warning

2016-12-02 18:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
  * source/client/letomgmn.c
  * source/server/errint.c
  * source/server/letofunc.c
    * try to pacify some MinGW GNU C 6.2 warnings, it found one real bug

2016-12-02 16:20 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * source/client/letocl.c
    ; correcting old comment, description was wrong
    ! fix!, that a record length of 43 is treated as no new record data,
      >= 0x2B0000 is secure never to happen

  * source/server/letofunc.c
    ! fix a crash during try to close not found WA ( empty pAStru )
    * typo

2016-12-01 20:12 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  ; README.md
    ; typo - file missing in last commit

  * include/letocl.h
  * source/client/leto1.c
    - removal of older xHarbour RDDFUNCS table version ( __OLDRDD__ )

2016-12-01 19:15 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * README.md
    * typo

  * Readme.txt
    - mark LETO_SETSEEKBUFFER as deprecated

  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    % minor performance arrangement for transactions
    - remove of seek buffers aka LETO_SETSEEKBUFFER,
      was off by default and the logig behind meanwhile got invalid,
      leading to a nice clean LetoDbSeek()

2016-12-01 11:45 UTC+0100 Rolf Beckmann ( elchs users.noreply.github.com )
  * include/letocl.h
  * source/client/client1.c
  * source/client/clientcl.c
    * move changed-record update call [ --> leto_PutRec() ] into letoSkipRaw(),
      so all these calls are in client1.c, only except for record appending;
      added reset of pending relations
    - remove relicts of ugly FastAppend hack, it led to serious problems in
      multiple areas ( memo update, locks tracking, autoincrement fields, .. );
      a transaction can be used instead for a similar effect
    + added field type HB_FT_ANY for transactions ( untested );
    ; ToDo ?: updated memo fields in transaction buffer, difficult :-(

2016-11-30
  * .
    initial upload after huge changes in all areas
